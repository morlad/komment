// vim: ft=javascript
var Komment = (function() {

  var self = {}

  self.refreshCounts = function(thread_id) {
    document.querySelectorAll("div.komment_count").forEach(function(obj) {
      if (thread_id === undefined || obj.dataset.kommentId == thread_id) {
        var request = new XMLHttpRequest();
        request.open("GET", "{{.CgiPath}}?r=c;komment_id=" + encodeURIComponent(obj.dataset.kommentId));
        request.onload = function() {
          obj.innerHTML = request.responseText;
        }
        request.send(null);
      }
    });
  }

  self.refreshMessages = function(thread_id) {
    document.querySelectorAll("div.komment_messages").forEach(function(obj) {
      if (thread_id === undefined || obj.dataset.kommentId == thread_id) {
        var request = new XMLHttpRequest();
        request.open("GET", "{{.CgiPath}}?r=l;komment_id=" + encodeURIComponent(obj.dataset.kommentId));
        request.onload = function() {
          obj.innerHTML = request.responseText;
          self.prepareEditButtons()
          self.prepareEndEditButtons()
          self.prepareEditForms()
        }
        request.send(null);
      }
    });
  }

  self.replaceForms = function() {
    document.querySelectorAll("div.komment_form").forEach(function(obj) {
      var request = new XMLHttpRequest();
      var thread_id = obj.dataset.kommentId;
      request.open("GET", "{{.CgiPath}}?r=form;komment_id=" + encodeURIComponent(thread_id));
      request.onload = function() {
        obj.innerHTML = request.responseText;
        var form = obj.querySelector("form");
        form.onsubmit = function() {
          var data = new FormData(form);
          data.append("r", "a");
          data.append("komment_id", thread_id);
          var request = new XMLHttpRequest();
          request.open("POST", "{{.CgiPath}}");
          request.onreadystatechange = function() {
            if (request.readyState == 4) {
              if (request.status == 200) {
                form.reset();
                self.refreshCounts(thread_id)
                self.refreshMessages(thread_id)
              } else {
                alert("Error!\n[" + request.responseText + "]");
              }
            }
          };
          request.send(data);
          return false;
        }
      }
      request.send(null);
    });
  }

  self.prepareEditForms = function() {
    document.querySelectorAll("form.komment_edit_form").forEach(function(obj) {
      obj.onsubmit = function() {
        var data = new FormData(obj);
        data.append("r", "e");
        data.append("komment_id", obj.dataset.kommentId);
        data.append("message_id", obj.dataset.messageId);
        var request = new XMLHttpRequest();
        request.open("POST", "{{.CgiPath}}");
        request.onreadystatechange = function() {
          if (request.readyState == 4) {
            if (request.status == 200) {
              self.refreshMessages(obj.dataset.kommentId);
            } else {
              alert("Error!\n[" + request.responseText + "]");
            }
          }
        }
        request.send(data);
        return false;
      }
    });
  }

  self.closest = function(n, predicate) {
    do {
      if (predicate(n)) {
        return n;
      }
    } while (n = n && n.parentNode);
  }

  self.prepareEditButtons = function() {
    document.querySelectorAll("a.komment_edit_button").forEach(function(obj) {
      obj.onclick = function() {
        block = self.closest(obj, function(e) {
          return e.classList.contains("komment_block");
        })
        message = block.querySelector(".komment_message").style.display = "none";
        edit = block.querySelector(".komment_edit").style.display = "block";
      }
    });
  }

  self.prepareEndEditButtons = function() {
    document.querySelectorAll("form.komment_edit_form > input[type=button]").forEach(function(obj) {
      obj.onclick = function() {
        block = self.closest(obj, function(e) {
          return e.classList.contains("komment_block");
        })
        message = block.querySelector(".komment_message").style.display = "block";
        edit = block.querySelector(".komment_edit").style.display = "none";
      }
    });
  }

  self.init = function() {
    self.replaceForms();
    self.refreshCounts();
    self.refreshMessages();
  }

  return self

}());
